{
  "hash": "b687eb595f5fef2bcb431b8033acfb03",
  "result": {
    "markdown": "---\ntitle: \"R Basics\"\nabstract: \"Data types, vectors, functions, R packages\"\n---\n\n\n\n\n## R as Calculator\n\n\n::: {.cell}\n\n```{.r .cell-code}\n3+2  # Run \n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 5\n```\n:::\n\n```{.r .cell-code}\n3-2\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 1\n```\n:::\n\n```{.r .cell-code}\n3*2\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 6\n```\n:::\n\n```{.r .cell-code}\n3/2\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 1.5\n```\n:::\n\n```{.r .cell-code}\n3%/%2 #integer division\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 1\n```\n:::\n\n```{.r .cell-code}\n5%%3 #modulus division\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 2\n```\n:::\n\n```{.r .cell-code}\n(10 - 5) * (2 + 4)  # Importance of brackets\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 30\n```\n:::\n\n```{.r .cell-code}\n10 - 5 * 2 + 4\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 4\n```\n:::\n\n```{.r .cell-code}\n(10 - 5)  * (2 + 4) # The use of brackets change the order\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 30\n```\n:::\n\n```{.r .cell-code}\n########################### \n\n7/(1+3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 1.75\n```\n:::\n\n```{.r .cell-code}\n7/1+3\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 10\n```\n:::\n\n```{.r .cell-code}\n7/(1+3); 7/1+3\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 1.75\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 10\n```\n:::\n\n```{.r .cell-code}\n1+2; log(1); 1/10\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 3\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 0\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 0.1\n```\n:::\n\n```{.r .cell-code}\n###########################################\n## You can also give numbers a name, \n## known as variables\n\na=5\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 5\n```\n:::\n\n```{.r .cell-code}\na*7\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 35\n```\n:::\n\n```{.r .cell-code}\na=a+10\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 15\n```\n:::\n\n```{.r .cell-code}\na*3\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 45\n```\n:::\n\n```{.r .cell-code}\na=a+10\nb=a+10\n\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 25\n```\n:::\n\n```{.r .cell-code}\na^2 #power/exponent 2 or square\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 625\n```\n:::\n\n```{.r .cell-code}\na**2 #same as ^ (power)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 625\n```\n:::\n\n```{.r .cell-code}\n#Task: normal division, integer division and modulus division of 7 and 3\n#####################\n7/3\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 2.333333\n```\n:::\n\n```{.r .cell-code}\n7%/%3\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 2\n```\n:::\n\n```{.r .cell-code}\n7%%3\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nx=5/3 #normal division\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 1.666667\n```\n:::\n\n```{.r .cell-code}\ny=5%/%3 #Integer division\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nz=5%%3 #modulus\nz\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 2\n```\n:::\n\n```{.r .cell-code}\nx=5/3\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 1.666667\n```\n:::\n\n```{.r .cell-code}\nfloor(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 1\n```\n:::\n\n```{.r .cell-code}\n# -> 1 ## previous largest integer/divident\nceiling(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 2\n```\n:::\n\n```{.r .cell-code}\n# -> 2 ## next smallest integer/reminder\nround(x) # -> 2 (decided based on the number)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 2\n```\n:::\n\n```{.r .cell-code}\nx=5/4 \nx \n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 1.25\n```\n:::\n\n```{.r .cell-code}\nfloor(x) \n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nceiling(x) #in the form of nearby integer\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 2\n```\n:::\n\n```{.r .cell-code}\nx%%2 \n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 1.25\n```\n:::\n\n```{.r .cell-code}\n#Task;\n#make a varible having a value of 15\n#do different types of arithmatic operations\n\ny=15\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 15\n```\n:::\n\n```{.r .cell-code}\ny+5\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 20\n```\n:::\n\n```{.r .cell-code}\ny-5\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 10\n```\n:::\n\n```{.r .cell-code}\ny*5\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 75\n```\n:::\n\n```{.r .cell-code}\ny/5\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 3\n```\n:::\n\n```{.r .cell-code}\n(y+4)*(4-y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] -209\n```\n:::\n\n```{.r .cell-code}\ny%/%4\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 3\n```\n:::\n\n```{.r .cell-code}\ny%%4\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 3\n```\n:::\n\n```{.r .cell-code}\nfloor(y/4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 3\n```\n:::\n\n```{.r .cell-code}\nceiling(y/4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 4\n```\n:::\n\n```{.r .cell-code}\ny/4\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 3.75\n```\n:::\n\n```{.r .cell-code}\nround(y/4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 4\n```\n:::\n\n```{.r .cell-code}\n##########################################\n## Exercise :\n\n(2+3) + (2*3) - (6/3) -3^2 \n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 0\n```\n:::\n\n```{.r .cell-code}\n###########################################\n######### logical operations #############\na=5\nb=7\n\na=5\nb=8\n\na==b #FALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\na!=b # TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\na>b # FALSE and so on for the remaining\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\na<b\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\na>=b\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\na<=b\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\na<b | a>b \n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\na<b & a>b\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\na<b | a>=b # ? \n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\na<b & a>=b # ?\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n# | (pipe) ==> \n\n######################################\n### help ###########################\n?log\nhelp(log)\nexample(log)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n\nlog> log(exp(3))\n[1] 3\n\nlog> log10(1e7) # = 7\n[1] 7\n\nlog> x <- 10^-(1+2*1:9)\n\nlog> cbind(deparse.level=2, # to get nice column names\nlog+       x, log(1+x), log1p(x), exp(x)-1, expm1(x))\n          x   log(1 + x)     log1p(x)   exp(x) - 1     expm1(x)\n [1,] 1e-03 9.995003e-04 9.995003e-04 1.000500e-03 1.000500e-03\n [2,] 1e-05 9.999950e-06 9.999950e-06 1.000005e-05 1.000005e-05\n [3,] 1e-07 1.000000e-07 1.000000e-07 1.000000e-07 1.000000e-07\n [4,] 1e-09 1.000000e-09 1.000000e-09 1.000000e-09 1.000000e-09\n [5,] 1e-11 1.000000e-11 1.000000e-11 1.000000e-11 1.000000e-11\n [6,] 1e-13 9.992007e-14 1.000000e-13 9.992007e-14 1.000000e-13\n [7,] 1e-15 1.110223e-15 1.000000e-15 1.110223e-15 1.000000e-15\n [8,] 1e-17 0.000000e+00 1.000000e-17 0.000000e+00 1.000000e-17\n [9,] 1e-19 0.000000e+00 1.000000e-19 0.000000e+00 1.000000e-19\n```\n:::\n\n```{.r .cell-code}\n?sd\n\n###########################\n\n\n\n# create your first vector\n\nx=c(1,2,3,4,5)\ny=c(3,6,9,12,15)\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1]  3  6  9 12 15\n```\n:::\n\n```{.r .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 1 2 3 4 5\n```\n:::\n\n```{.r .cell-code}\nlength(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 5\n```\n:::\n\n```{.r .cell-code}\nlength(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 5\n```\n:::\n\n```{.r .cell-code}\nmode(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\nis(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] \"numeric\" \"vector\" \n```\n:::\n\n```{.r .cell-code}\nmode(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\nis(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] \"numeric\" \"vector\" \n```\n:::\n\n```{.r .cell-code}\nx= c(1, 2, 3, 4, 5, 6, 7, 8, 9) # c=\"concatenate\"\n# x is a vector\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 1 2 3 4 5 6 7 8 9\n```\n:::\n\n```{.r .cell-code}\nmode(x)    # mode of x\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\nis(x)     # type of x\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] \"numeric\" \"vector\" \n```\n:::\n\n```{.r .cell-code}\nlength(x) #length of x\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 9\n```\n:::\n\n```{.r .cell-code}\nDNA=c(\"A\", \"T\", \"G\", \"C\")\nDNA\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] \"A\" \"T\" \"G\" \"C\"\n```\n:::\n\n```{.r .cell-code}\nmode(DNA)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\nis(DNA)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] \"character\"           \"vector\"              \"data.frameRowLabels\"\n[4] \"SuperClassMethod\"   \n```\n:::\n\n```{.r .cell-code}\nlength(DNA)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 4\n```\n:::\n\n```{.r .cell-code}\n#Task: character vector of 1, 3, 5, 7\n\n\nchar=c(\"1\", \"3\", \"5\", \"7\")\nchar\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] \"1\" \"3\" \"5\" \"7\"\n```\n:::\n\n```{.r .cell-code}\nDNA2=c(\"ATGTGTCA\", \"GTCA\", \"GTCATC\")\n#Task: mode, is function, length\n\nmode(DNA2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\nis(DNA2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] \"character\"           \"vector\"              \"data.frameRowLabels\"\n[4] \"SuperClassMethod\"   \n```\n:::\n\n```{.r .cell-code}\nlength(DNA2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 3\n```\n:::\n\n```{.r .cell-code}\nlogicals=c(TRUE, TRUE, FALSE, TRUE, FALSE)\nlogicals\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1]  TRUE  TRUE FALSE  TRUE FALSE\n```\n:::\n\n```{.r .cell-code}\nmode(logicals)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] \"logical\"\n```\n:::\n\n```{.r .cell-code}\nlength(logicals)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 5\n```\n:::\n\n```{.r .cell-code}\nis(logicals)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] \"logical\" \"vector\" \n```\n:::\n\n```{.r .cell-code}\ny= c(\"1\", \"2\", \"3\", \"4\")\n\nmode(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\ndec=c(10,20,30,60,80,90,100,50,40)\ndec\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1]  10  20  30  60  80  90 100  50  40\n```\n:::\n\n```{.r .cell-code}\ndec[2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 20\n```\n:::\n\n```{.r .cell-code}\ndec[7]\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 100\n```\n:::\n\n```{.r .cell-code}\ndec[3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 30\n```\n:::\n\n```{.r .cell-code}\nDNA2=c(\"ATGTGTCA\", \"GTCA\", \"GTCATC\")\nDNA2[2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] \"GTCA\"\n```\n:::\n\n```{.r .cell-code}\nDNA2[3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] \"GTCATC\"\n```\n:::\n\n```{.r .cell-code}\nyz=c(3, 4, 7, 9, 10, 5)\nyz\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1]  3  4  7  9 10  5\n```\n:::\n\n```{.r .cell-code}\n#Task: 3rd, 4th, and 2nd element from yz\n\nyz[3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 7\n```\n:::\n\n```{.r .cell-code}\nyz[4]\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 9\n```\n:::\n\n```{.r .cell-code}\nyz[2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] 4\n```\n:::\n\n```{.r .cell-code}\ns= c(\"AATTGCCC\", \"ATGCATT\", \"AACCGTTG\")\ns[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] \"AATTGCCC\"\n```\n:::\n\n```{.r .cell-code}\n# Task: find the others with indexing\ns[2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] \"ATGCATT\"\n```\n:::\n\n```{.r .cell-code}\ns[3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] \"AACCGTTG\"\n```\n:::\n\n```{.r .cell-code}\n##########################################\n########## vector operations ############\n# Most standard mathematical functions work with vectors.\nx= c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\nx+x  #goes index-wise\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n [1]  2  4  6  8 10 12 14 16 18 20\n```\n:::\n\n```{.r .cell-code}\nmode(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\nis(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n[1] \"numeric\" \"vector\" \n```\n:::\n\n```{.r .cell-code}\ny= c(5, 10 ,15, 20, 25, 30, 35, 40, 45, 50)\n\ny/x\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n [1] 5 5 5 5 5 5 5 5 5 5\n```\n:::\n\n```{.r .cell-code}\ny * x\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n [1]   5  20  45  80 125 180 245 320 405 500\n```\n:::\n\n```{.r .cell-code}\nlog2(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n [1] 0.000000 1.000000 1.584963 2.000000 2.321928 2.584963 2.807355 3.000000\n [9] 3.169925 3.321928\n```\n:::\n\n```{.r .cell-code}\n#Round the values\nx= c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) \nlog2(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n [1] 0.000000 1.000000 1.584963 2.000000 2.321928 2.584963 2.807355 3.000000\n [9] 3.169925 3.321928\n```\n:::\n\n```{.r .cell-code}\nround(log2(x))\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n [1] 0 1 2 2 2 3 3 3 3 3\n```\n:::\n\n```{.r .cell-code}\n####Task: Round the value for 1, 3 digits after decimal\nround(log2(x), 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n [1] 0.0 1.0 1.6 2.0 2.3 2.6 2.8 3.0 3.2 3.3\n```\n:::\n\n```{.r .cell-code}\nround(log2(x), 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.custom-output}\n [1] 0.000 1.000 1.585 2.000 2.322 2.585 2.807 3.000 3.170 3.322\n```\n:::\n\n```{.r .cell-code}\n########### Exercise 1\n# Compute the difference between 2020\n# and the year you started at the university and \n# divide this by the difference between 2020 and the year you were born.\n# Multiply this with 100 to get the percentage of your life \n# you have spent at the university.\n```\n:::\n\n\n## Basic plotting\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 1:10\nb <-10:1\nplot(a, b)\n```\n\n::: {.cell-output-display}\n![](firststeps_files/figure-html/unnamed-chunk-3-1.png){width=1650}\n:::\n:::\n",
    "supporting": [
      "firststeps_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}