---
title: "The tidyverse"
abstract: "Pipe (%>%), Tibbles, dplyr-verbs, long/wide format and more."
---

```{r}
#| include: false
source(here::here("src/helpersrc.R"))
```

When using R, you will sooner or later hear about the [{tidyverse}](https://www.wikiwand.com/en/Tidyverse). The tidyverse is a collection of R packages that "share an underlying design philosophy, grammar, and data structures" of tidy data. The individual tidyverse packages comprise some of the most downloaded R packages.

Install the complete tidyverse with:

```{r}
#| eval: false

install.packages("tidyverse")
# or
pacman::p_load("tidyverse")
```

|                                                                 ggplot2                                                                  |                                                                dplyr                                                                 |                                                                 tibble                                                                 |                                                                 forcats                                                                  |                                                                 stringr                                                                  |
|:----------------------------------------------------------------------------------------------------------------------------------------:|:------------------------------------------------------------------------------------------------------------------------------------:|:--------------------------------------------------------------------------------------------------------------------------------------:|:----------------------------------------------------------------------------------------------------------------------------------------:|:----------------------------------------------------------------------------------------------------------------------------------------:|
| [<img src="https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/ggplot2.png" width="100"/>](https://ggplot2.tidyverse.org/) | [<img src="https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/dplyr.png" width="100"/>](https://dplyr.tidyverse.org/) | [<img src="https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/tibble.png" width="100"/>](https://tibble.tidyverse.org/) | [<img src="https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/forcats.png" width="100"/>](https://forcats.tidyverse.org/) | [<img src="https://raw.githubusercontent.com/rstudio/hex-stickers/master/PNG/stringr.png" width="100"/>](https://stringr.tidyverse.org/) |

: Some of my favorite tidyverse packages

I did not use the tidyverse packages in my first years using R, but I wish I did. While you can often reach your goal with or without using the tidyverse packages, I personally prefer using them. Thus, they are used extensively throughout the chapters of this website.

During the next sections I will try to explain how to use some of these packages and sometimes compare them to the Base R (= non-tidyverse) alternative.

::: {.callout-tip collapse="true"}
## Additional Resources

-   ["R for Data Science"](https://r4ds.had.co.nz/) [@wickham_2017], which is a book that can be read online for free and was written by the package authors themselves.
:::

# Tables

Finally, we can now talk about data tables with rows and columns. In R, I like to think of a table as multiple vectors side by side, so that each column is a vector.

## data.frame

Base R has a standard format for data tables called `data.frame`. Here is an example table that is an R built-in, just like `pi` is - it is called `PlantGrowth`:

```{r}
PlantGrowth
```

Let us create a copy of this table called `df` (**d**ata**f**rame) and then use some helpful functions to get a first impression of this data:

```{r}
df <- PlantGrowth
str(df)
summary(df)
```

We can see that this dataset has 30 observations (=rows) and 2 variables (=columns) and is of the type "data.frame". Furthermore, the first variable is called `weight` and contains numeric values for which we get some measures of central tendency like the minimum, maximum, mean and median. The second variable is called `group` and is of the type factor containing a total of three different levels, which each appear 10 times.

If you want to extract/use values of only one column of such a data.frame, you write the name of the data.frame, then a `$` and finally the name of the respective column. It returns the values of that column as a vector:

```{r}
df$weight
df$group
```

## tibble

One major aspect of the tidyverse is formatting tables as **tibble instead of data.frame**. A tibble *"is a modern reimagining of the data.frame, keeping what time has proven to be effective, and throwing out what is not."* It is super simple to convert a data.frame into a tibble, but you must have the tidyverse R package {tibble} installed and loaded - which it is if you are loading the entire {tidyverse}. Let us convert our `df` into a tibble and call it `tbl`:

```{r}
pacman::p_load(tidyverse)
tbl <- as_tibble(df)
tbl
```

Of course, the data itself does not change - only its format and the way it is displayed to us in R. If you compare the output we get from printing `tbl` here to that of printing `df` above, I would like to point out some things I find extremely convenient for tibbles:

1.  There is an extra first line telling us about the number of rows and columns.
2.  There is an extra line below the column names telling us about the data type of each column.
3.  Only the first ten rows of data are printed and a *"... with 20 more rows"* is added below.
4.  It can't be seen here, but this would analogously happen if there were too many columns.
5.  It can't be seen here, but missing values `NA` and negative numbers are printed in red.

Finally, note that in its heart, a tibble is still a data.frame and in most cases you can do everything with a tibble that you can do with a data.frame:

::: columns
::: {.column width="49%"}
```{r}
#| code-overflow: wrap
class(tbl)
str(tbl)
summary(tbl)
tbl$weight
tbl$group
```
:::

::: {.column width="2%"}
:::

::: {.column width="49%"}
```{r}
#| code-overflow: wrap
class(df)
str(df)
summary(df)
df$weight
df$group
```
:::
:::

Therefore, I almost always format my datasets as tibbles.

# Plots

Base R has a `plot()` function which is good at getting some first data visualizations with very little code. It guesses what type of plot you would like to see via the data type of the respective data to be plotted:

```{r}
#| layout-ncol: 3
#| fig-width: 5
#| fig-height: 4

plot(df$weight) # scatter plot of values in the order they appear
plot(df$group) # bar plot of frequency of each level
plot(x = df$group, y = df$weight) # boxplot for values of each level
```

However, I really just use `plot()` to get a quick first glance at data. In order to get professional visualizations I always use the tidyverse package `{ggplot2}` and its function `ggplot()`. It seems like it can create any plot you can imagine and there are multiple examples with increasing complexity spread out through this website's chapters.

::: {.callout-tip collapse="true"}
## Additional Resources

-   Cédric Scherer's [-@scherer_2022] [A ggplot2 tutorial for beautiful plotting in R](https://www.cedricscherer.com/2019/08/05/a-ggplot2-tutorial-for-beautiful-plotting-in-r/)
-   [ggplot2 extensions gallery](https://exts.ggplot2.tidyverse.org/gallery/)
:::

# The pipe operator

The pipe operator *"completely changed the way how we code in R, making it more simple and readable"* [@álvarez_2021]. I started using the pipe as `%>%` from the {dplyr} package[^1]. However, since May 18, 2021 (= R 4.1.0) the pipe is officially part of Base R - although written as `|>`[^2].

[^1]: But it was not the first package to use it. [This blog post](http://adolfoalvarez.cl/blog/2021-09-16-plumbers-chains-and-famous-painters-the-history-of-the-pipe-operator-in-r/) has a nice summary of the history of the pipe operator in R.

[^2]: Note that there are some differences between `%>%` and `|>` - find more about it *e.g.* [here](https://twitter.com/TimTeaFan/status/1582118234220007424), [here](http://adolfoalvarez.cl/blog/2021-09-16-plumbers-chains-and-famous-painters-the-history-of-the-pipe-operator-in-r/#base-r) or [here](https://stackoverflow.com/questions/67633022/what-are-the-differences-between-rs-new-native-pipe-and-the-magrittr-pipe).

To understand what makes it so great we need to start using more than one function at a time. So far, we have only used functions individually. Yet, in real life you will often find yourself having to combine multiple functions. As a fictional example, let's say that from the `PlantGrowth` data, we want to extract a sorted vector of the square root of all weight-values that belong to the `ctrl` group. I will show three approaches how to accomplish this

## No pipe - intermediate steps

Using one function at a time and saving the output in the variables `a` - `d`, we can do this:

```{r}
a <- filter(PlantGrowth, group == "ctrl")
b <- pull(a, weight) # same as: b <- a$weight
c <- sqrt(b)
d <- round(c, digits = 1)
sort(d)
```

## No pipe - nesting functions

Just like in MS Excel, it is possible to write functions inside of functions so that we can do this:

```{r}
sort(round(sqrt(pull(filter(PlantGrowth, group == "ctrl"), weight)), digits = 1))
```

## Pipe!

This approach (i) allows you to write functions from left to right/top to bottom and thus in the order they are executed and the way you think about them and (ii) does not create extra variables for intermediate steps:

```{r}
PlantGrowth %>% 
  filter(group == "ctrl") %>% 
  pull(weight) %>% 
  sqrt() %>% 
  round(digits = 1) %>% 
  sort()
```

You can think about it like this: Something (in this case the `PlantGrowth` data.frame) goes into the pipe and is directed to the next function `filter()`. By default, this function takes what came out of the previous pipe and puts it as its first argument. This happens with every pipe. You'll notice that all the functions who required two arguments above, now only need one argument, *i.e.* the additional argument, because the main argument stating which data is to be used is by default simply what came out of the previous pipe. Accordingly, the functions `sqrt()` and `sort()` appear empty here, because they only need one piece of information and that is which data they should work with. Finally note that you can easily highlight only some of the lines up until one of the pipes to see the intermediate results.

::: callout-note
The keyboard shortcut for writing `%>%` in RStudio is **CTRL+SHIFT+M**. Keyboard shortcuts can be customized in RStudio as described [here](https://support.rstudio.com/hc/en-us/articles/206382178-Customizing-Keyboard-Shortcuts-in-the-RStudio-IDE).
:::

# dplyr verbs

Taken directly from [the documentation](https://dplyr.tidyverse.org/):

> {dplyr} is a grammar of data manipulation, providing a consistent set of verbs that help you solve the most common data manipulation challenges:
>
> -   `mutate()` adds new variables that are functions of existing variables.
>
> -   `select()` picks variables based on their names.
>
> -   `filter()` picks cases based on their values.
>
> -   `summarise()` reduces multiple values down to a single summary.
>
> -   `arrange()` changes the ordering of the rows.
>
> These all combine naturally with `group_by()` which allows you to perform any operation "by group". If you are new to dplyr, the best place to start is [the data transformation chapter](https://r4ds.had.co.nz/transform.html) in *R for data science* [@wickham_2017].

In my experience you really can do most of the data manipulation before and after the actual statistics with these functions. In other words, it is exactly these functions who can and should replace the manual work you may currently even be doing in MS Excel. In the following sections I will give very brief examples of how to use these functions while always pointing to more thorough resources.

## mutate()

This function is useful whenever you want to change existing columns or add new columns to your table. To keep the following examples short and simple, let's create `tbl2` as only the first six rows of `tbl` via the `head()` function:

```{r}
tbl2 <- head(tbl)
tbl2
```

Let's start by adding 2 to the `weight` in our data. Below, we do this two different ways: by adding a column named `new` to the dataset (left) and by replacing/overwriting the original `weight` column (right):

::: columns
::: {.column width="49%"}
```{r}
tbl2 %>% 
  mutate(new = weight + 2)
```
:::

::: {.column width="2%"}
:::

::: {.column width="49%"}
```{r}
tbl2 %>% 
  mutate(weight = weight + 2)
```
:::
:::

We can also create multiple columns at once (left) and make the values of the new column dynamically depend on the other columns via `case_when()` (right):

::: columns ::: {.column width="49%"}

```{r}
tbl2 %>%
  mutate(
    `Name with Space` = "Hello!",
    number10 = 10
  )
```

:::

::: {.column width="2%"}
:::

::: {.column width="49%"}
